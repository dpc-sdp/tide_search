<?php

/**
 * @file
 * Install file.
 */

use Drupal\search_api\Item\Field;
use Drupal\tide_search\TideSearchOperation;

/**
 * Implements hook_install().
 */
function tide_search_install() {
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->removeTideAlertFromDatasource();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_search_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_search'][8001] = ['tide_core' => 8009];

  return $dependencies;
}

/**
 * Add Path alias field to search index for Topic and Tags.
 */
function tide_search_update_8001() {
  $index_storage = \Drupal::entityTypeManager()
    ->getStorage('search_api_index');
  /** @var \Drupal\search_api\IndexInterface $index */
  $index = $index_storage->load('node');
  if (!$index) {
    return;
  }

  // Index the Topic path.
  if (!$index->getField('field_topic_path')) {
    $field_topic_path = new Field($index, 'field_topic_path');
    $field_topic_path->setType('string');
    $field_topic_path->setPropertyPath('field_topic:entity:path');
    $field_topic_path->setDatasourceId('entity:node');
    $field_topic_path->setLabel('Topic » Taxonomy term » URL alias');
    $index->addField($field_topic_path);
  }

  // Index the Tags path.
  if (!$index->getField('field_tags_path')) {
    $field_tags_path = new Field($index, 'field_tags_path');
    $field_tags_path->setType('string');
    $field_tags_path->setPropertyPath('field_tags:entity:path');
    $field_tags_path->setDatasourceId('entity:node');
    $field_tags_path->setLabel('Tags » Taxonomy term » URL alias');
    $index->addField($field_tags_path);
  }

  $index->save();
}

/**
 * Adds field_landing_page_summary field to search api, and updates settings.
 */
function tide_search_update_8002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('search_api.index.node');
  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.storage.node.field_landing_page_summary', $dependencies)) {
    $dependencies[] = 'field.storage.node.field_landing_page_summary';
    $config->set('dependencies.config', $dependencies);
  }
  $field_settings = $config->get('field_settings');
  if (isset($field_settings['field_topic_name']['type']) && $field_settings['field_topic_name']['type'] === 'text') {
    $field_settings['field_topic_name']['type'] = 'string';
    if (isset($field_settings['field_topic_name']['boost'])) {
      unset($field_settings['field_topic_name']['boost']);
    }
  }
  if (isset($field_settings['field_tags_name']['type']) && $field_settings['field_tags_name']['type'] === 'text') {
    $field_settings['field_tags_name']['type'] = 'string';
    if (isset($field_settings['field_tags_name']['boost'])) {
      unset($field_settings['field_tags_name']['boost']);
    }
  }
  if (!isset($field_settings['field_landing_page_summary'])) {
    $field_settings['field_landing_page_summary'] = [
      'label' => 'Summary',
      'datasource_id' => 'entity:node',
      'property_path' => 'field_landing_page_summary',
      'type' => 'text',
      'dependencies' => [
        'config' => [
          'field.storage.node.field_landing_page_summary',
        ],
      ],
    ];
    $config->set('field_settings', $field_settings);
  }
  $processor_settings = $config->get('processor_settings.html_filter.fields');
  if (!in_array('field_landing_page_summary', $processor_settings)) {
    $processor_settings[] = 'field_landing_page_summary';
    $config->set('processor_settings.html_filter.fields', $processor_settings);
  }
  $config->save();
}

/**
 * Removes alert content type from indexing.
 */
function tide_search_update_8003() {
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->removeTideAlertFromDatasource();
}

/**
 * Add new content type for Search Listing.
 */
function tide_search_update_8004() {
  \Drupal::service('module_installer')->install(['tide_content_collection'], TRUE);
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->createSearchListingContentType($config_location);
  $tideSearchOperation->updateSearchListingFormDisplay($config_location);
  $tideSearchOperation->addSearchListingPermissions();
  $tideSearchOperation->addSearchListingWorkflows();
  $tideSearchOperation->allowJsonApiResources();
  $tideSearchOperation->addTaxonomyTerms(
    'search_listing_custom_header_com',
    ['Progress Bar']
  );
  $tideSearchOperation->addTaxonomyTerms(
    'listing_layout_comp_taxonomy',
    ['Grid', 'List', 'Table']
  );
  $tideSearchOperation->addTaxonomyTerms(
    'listing_results_comp_taxonomy',
    ['Card', 'Card (Profile)', 'List item', 'List item (Grants)']
  );
  $tideSearchOperation->addSearchableFieldsTerms();
}
