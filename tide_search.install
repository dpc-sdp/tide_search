<?php

/**
 * @file
 * Install file.
 */

use Drupal\search_api\Item\Field;
use Drupal\tide_search\TideSearchOperation;

/**
 * Implements hook_install().
 */
function tide_search_install() {
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->removeTideAlertFromDatasource();
}

/**
 * Implements hook_update_dependencies().
 */
function tide_search_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_search'][8001] = ['tide_core' => 8009];
  $dependencies['tide_search'][8005] = ['tide_landing_page' => 8050];
  return $dependencies;
}

/**
 * Add Path alias field to search index for Topic and Tags.
 */
function tide_search_update_8001() {
  $index_storage = \Drupal::entityTypeManager()
    ->getStorage('search_api_index');
  /** @var \Drupal\search_api\IndexInterface $index */
  $index = $index_storage->load('node');
  if (!$index) {
    return;
  }

  // Index the Topic path.
  if (!$index->getField('field_topic_path')) {
    $field_topic_path = new Field($index, 'field_topic_path');
    $field_topic_path->setType('string');
    $field_topic_path->setPropertyPath('field_topic:entity:path');
    $field_topic_path->setDatasourceId('entity:node');
    $field_topic_path->setLabel('Topic Â» Taxonomy term Â» URL alias');
    $index->addField($field_topic_path);
  }

  // Index the Tags path.
  if (!$index->getField('field_tags_path')) {
    $field_tags_path = new Field($index, 'field_tags_path');
    $field_tags_path->setType('string');
    $field_tags_path->setPropertyPath('field_tags:entity:path');
    $field_tags_path->setDatasourceId('entity:node');
    $field_tags_path->setLabel('Tags Â» Taxonomy term Â» URL alias');
    $index->addField($field_tags_path);
  }

  $index->save();
}

/**
 * Adds field_landing_page_summary field to search api, and updates settings.
 */
function tide_search_update_8002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('search_api.index.node');
  $dependencies = $config->get('dependencies.config');
  if (!in_array('field.storage.node.field_landing_page_summary', $dependencies)) {
    $dependencies[] = 'field.storage.node.field_landing_page_summary';
    $config->set('dependencies.config', $dependencies);
  }
  $field_settings = $config->get('field_settings');
  if (isset($field_settings['field_topic_name']['type']) && $field_settings['field_topic_name']['type'] === 'text') {
    $field_settings['field_topic_name']['type'] = 'string';
    if (isset($field_settings['field_topic_name']['boost'])) {
      unset($field_settings['field_topic_name']['boost']);
    }
  }
  if (isset($field_settings['field_tags_name']['type']) && $field_settings['field_tags_name']['type'] === 'text') {
    $field_settings['field_tags_name']['type'] = 'string';
    if (isset($field_settings['field_tags_name']['boost'])) {
      unset($field_settings['field_tags_name']['boost']);
    }
  }
  if (!isset($field_settings['field_landing_page_summary'])) {
    $field_settings['field_landing_page_summary'] = [
      'label' => 'Summary',
      'datasource_id' => 'entity:node',
      'property_path' => 'field_landing_page_summary',
      'type' => 'text',
      'dependencies' => [
        'config' => [
          'field.storage.node.field_landing_page_summary',
        ],
      ],
    ];
    $config->set('field_settings', $field_settings);
  }
  $processor_settings = $config->get('processor_settings.html_filter.fields');
  if (!in_array('field_landing_page_summary', $processor_settings)) {
    $processor_settings[] = 'field_landing_page_summary';
    $config->set('processor_settings.html_filter.fields', $processor_settings);
  }
  $config->save();
}

/**
 * Removes alert content type from indexing.
 */
function tide_search_update_8003() {
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->removeTideAlertFromDatasource();
}

/**
 * Add new content type for Search Listing.
 */
function tide_search_update_8004() {
  \Drupal::service('module_installer')->install(['tide_content_collection'], TRUE);
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];
  $tideSearchOperation = new TideSearchOperation();
  $tideSearchOperation->createSearchListingContentType($config_location);
  $tideSearchOperation->updateSearchListingFormDisplay($config_location);
  $tideSearchOperation->addSearchListingPermissions();
  $tideSearchOperation->addSearchListingWorkflows();
  $tideSearchOperation->allowJsonApiResources();
  $tideSearchOperation->addTaxonomyTerms(
    'search_listing_custom_header_com',
    ['Progress Bar']
  );
  $tideSearchOperation->addTaxonomyTerms(
    'listing_layout_comp_taxonomy',
    ['TideSearchResultsGrid', 'TideSearchResultsList', 'TideSearchResultsTable']
  );
  $tideSearchOperation->addTaxonomyTerms(
    'listing_results_comp_taxonomy',
    ['TideSearchResult', 'TideSearchResultCard', 'TideGrantSearchResult']
  );
  $tideSearchOperation->addSearchableFieldsTerms();
}

/**
 * Update search api fields for Ripple 2.0 search.
 */
function tide_search_update_8005() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('paragraphs') && $moduleHandler->moduleExists('tide_landing_page')) {
    $tideSearchOperation = new TideSearchOperation();
    $tideSearchOperation->setCoreSearchApiFields();
  }
}

/**
 * Install module tide_data_pipeline.
 */
function tide_search_update_8006() {
  if (!\Drupal::moduleHandler()->moduleExists('tide_data_pipeline')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['tide_data_pipeline']);
  }
}

/**
 * Add secondary campaign to search listing.
 */
function tide_search_update_8007() {
  \Drupal::moduleHandler()->loadInclude('tide_core', 'inc', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_search') . '/config/optional'];

  $config = 'field.field.node.tide_search_listing.field_landing_page_c_secondary';
  $type = 'field_config';
  $config_read = _tide_read_config($config, $config_location);
  $storage = \Drupal::entityTypeManager()->getStorage($type);
  $id = substr($config, strrpos($config, '.') + 1);
  if ($storage->load($id) == NULL) {
    $config_entity = $storage->createFromStorageRecord($config_read);
    $config_entity->save();
  }

  $form_configs = [
    'core.entity_view_display.node.tide_search_listing.default',
    'core.entity_form_display.node.tide_search_listing.default',
    'core.entity_view_display.node.tide_search_listing.teaser',
  ];
  foreach ($form_configs as $form_config) {
    $config = \Drupal::configFactory()->getEditable($form_config);
    $config_read = _tide_read_config($form_config, $config_location, FALSE);
    $config->set('dependencies', $config_read['dependencies']);
    $config->set('content', $config_read['content']);
    $config->set('hidden', $config_read['hidden']);
    $config->save();
  }
}

/**
 * Add default set of terms to searchable fields vocab.
 */
function tide_search_update_8008() {
  $vid = 'searchable_fields';
  $terms = [
    [
      'name' => 'Audience (Grants)',
      'field_elasticsearch_field' => 'field_audience_name',
      'field_taxonomy_machine_name' => 'audience',
    ],
    [
      'name' => 'Content cateory',
      'field_elasticsearch_field' => 'field_content_category',
      'field_taxonomy_machine_name' => 'content_category',
    ],
    [
      'name' => 'Department',
      'field_elasticsearch_field' => 'field_department_agency',
      'field_taxonomy_machine_name' => 'department',
    ],
    [
      'name' => 'Event category',
      'field_elasticsearch_field' => 'field_event_category',
      'field_taxonomy_machine_name' => 'event',
    ],
    [
      'name' => 'Event requirements',
      'field_elasticsearch_field' => 'field_event_details_event_requirements_name',
      'field_taxonomy_machine_name' => 'event_requirements',
    ],
    [
      'name' => 'Sites and site sections',
      'field_elasticsearch_field' => 'field_node_site',
      'field_taxonomy_machine_name' => 'sites',
    ],
    [
      'name' => 'Tags',
      'field_elasticsearch_field' => 'field_tags',
      'field_taxonomy_machine_name' => 'tags',
    ],
    [
      'name' => 'Topic',
      'field_elasticsearch_field' => 'field_topic_name',
      'field_taxonomy_machine_name' => 'topic',
    ],
  ];
  $existing_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $insert = TRUE;
    foreach ($existing_terms as $existing_term) {
      if ($existing_term->name == $term['name']) {
        error_log("Cannot insert term ".$term['name']." as it's already present against searchable_fields vocab.");
        $insert = FALSE;
      }
    }
    if ($insert) {
      error_log("Inserting ".$term['name']." against searchable_fields vocab.");
      Term::create([
        'name' => $term['name'],
        'vid' => $vid,
        'field_elasticsearch_field' => $term['field_elasticsearch_field'],
        'field_taxonomy_machine_name' => $term['field_taxonomy_machine_name'],
        'parent' => [],
      ])->save();
    }
  }
}
